diff --git a/capacitor/src/main/java/com/getcapacitor/BridgeWebViewClient.java b/capacitor/src/main/java/com/getcapacitor/BridgeWebViewClient.java
index 87a6c6f77c7db7629654b81b776f101d455cf409..2a73cfc0fe7efcdf6ac589d26e7006d7118bc1aa 100644
--- a/capacitor/src/main/java/com/getcapacitor/BridgeWebViewClient.java
+++ b/capacitor/src/main/java/com/getcapacitor/BridgeWebViewClient.java
@@ -25,7 +25,13 @@ public class BridgeWebViewClient extends WebViewClient {
     @Override
     public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
         Uri url = request.getUrl();
-        return bridge.launchIntent(url);
+        boolean shouldOverride = bridge.launchIntent(url);
+        Logger.debug("ShouldOverrideUrlLoading (result:" + shouldOverride + ") " + request.getMethod() + ": "
+                + request.getUrl().toString());
+        if (!shouldOverride) {
+            shouldOverride = bridge.getLocalServer().shouldOverrideUrlLoading(view, request);
+        }
+        return shouldOverride;
     }
 
     @Deprecated
diff --git a/capacitor/src/main/java/com/getcapacitor/MessageHandler.java b/capacitor/src/main/java/com/getcapacitor/MessageHandler.java
index b71124e83b36aadd34e3baf6041b426958cb9d33..20568bdeae9ce269240dc4602783ff4293cfbb28 100644
--- a/capacitor/src/main/java/com/getcapacitor/MessageHandler.java
+++ b/capacitor/src/main/java/com/getcapacitor/MessageHandler.java
@@ -141,7 +141,9 @@ public class MessageHandler {
     private void legacySendResponseMessage(PluginResult data) {
         final String runScript = "window.Capacitor.fromNative(" + data.toString() + ")";
         final WebView webView = this.webView;
-        webView.post(() -> webView.evaluateJavascript(runScript, null));
+        if (!bridge.getActivity().isDestroyed()) {
+            webView.post(() -> webView.evaluateJavascript(runScript, null));
+        }
     }
 
     private void callPluginMethod(String callbackId, String pluginId, String methodName, JSObject methodData) {
diff --git a/capacitor/src/main/java/com/getcapacitor/WebViewLocalServer.java b/capacitor/src/main/java/com/getcapacitor/WebViewLocalServer.java
index 6ef1235007e9751bccecfc9ebfa858d60b109c51..0e1dab9342209a430e53c82da3d1e1faf1a8545a 100755
--- a/capacitor/src/main/java/com/getcapacitor/WebViewLocalServer.java
+++ b/capacitor/src/main/java/com/getcapacitor/WebViewLocalServer.java
@@ -17,10 +17,13 @@ package com.getcapacitor;
 
 import android.content.Context;
 import android.net.Uri;
+import android.os.Build;
 import android.util.Base64;
 import android.webkit.CookieManager;
 import android.webkit.WebResourceRequest;
 import android.webkit.WebResourceResponse;
+import android.webkit.WebView;
+import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
@@ -32,6 +35,7 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+
 /**
  * Helper class meant to be used with the android.webkit.WebView class to enable hosting assets,
  * resources and other data on 'virtual' https:// URL.
@@ -154,6 +158,17 @@ public class WebViewLocalServer {
         return uri;
     }
 
+    public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            if (request.isRedirect() && isServerUrl(request.getUrl())) {
+                Logger.debug("Manually handling redirect to " + request.getUrl());
+                view.evaluateJavascript("location.replace(\"" + request.getUrl() + "\")", null);
+                return true;
+            }
+        }
+        return false;
+    }
+
     /**
      * Attempt to retrieve the WebResourceResponse associated with the given <code>request</code>.
      * This method should be invoked from within
@@ -165,6 +180,7 @@ public class WebViewLocalServer {
      */
     public WebResourceResponse shouldInterceptRequest(WebResourceRequest request) {
         Uri loadingUrl = request.getUrl();
+        Logger.debug("Should Intercept Request -> " + loadingUrl.toString());
         PathHandler handler;
         synchronized (uriMatcher) {
             handler = (PathHandler) uriMatcher.match(request.getUrl());
@@ -177,10 +193,20 @@ public class WebViewLocalServer {
             Logger.debug("Handling local request: " + request.getUrl().toString());
             return handleLocalRequest(request, handler);
         } else {
+            Logger.debug("Handling proxy request: " + request.getUrl().toString());
             return handleProxyRequest(request, handler);
         }
     }
 
+    private boolean isServerUrl(Uri loadingUrl) {
+        if (bridge.getServerUrl() == null) {
+            return loadingUrl.getHost().equalsIgnoreCase(bridge.getHost());
+        } else {
+            Uri serverUrl = Uri.parse(bridge.getServerUrl());
+            return (serverUrl.getScheme().equals(loadingUrl.getScheme()) && serverUrl.getHost().equals(loadingUrl.getHost()));
+        }
+    }
+
     private boolean isLocalFile(Uri uri) {
         String path = uri.getPath();
         return path.startsWith(capacitorContentStart) || path.startsWith(capacitorFileStart);
@@ -333,6 +359,7 @@ public class WebViewLocalServer {
      */
     private WebResourceResponse handleProxyRequest(WebResourceRequest request, PathHandler handler) {
         final String method = request.getMethod();
+        Logger.debug("Request Method -> " + method);
         if (method.equals("GET")) {
             try {
                 String url = request.getUrl().toString();
@@ -344,6 +371,7 @@ public class WebViewLocalServer {
                         break;
                     }
                 }
+                Logger.debug("Handle Proxy Request isHtmlText:" + isHtmlText + " -> " + url);
                 if (isHtmlText) {
                     HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
                     for (Map.Entry<String, String> header : headers.entrySet()) {
@@ -356,6 +384,7 @@ public class WebViewLocalServer {
                     conn.setRequestMethod(method);
                     conn.setReadTimeout(30 * 1000);
                     conn.setConnectTimeout(30 * 1000);
+                    conn.setInstanceFollowRedirects(false);
                     if (request.getUrl().getUserInfo() != null) {
                         byte[] userInfoBytes = request.getUrl().getUserInfo().getBytes(StandardCharsets.UTF_8);
                         String base64 = Base64.encodeToString(userInfoBytes, Base64.NO_WRAP);
@@ -369,6 +398,33 @@ public class WebViewLocalServer {
                         }
                     }
                     InputStream responseStream = conn.getInputStream();
+
+                    if (conn.getResponseCode() == 302) {
+                        Logger.debug("302 Detected");
+                        String location = conn.getHeaderField("Location");
+                        Uri locationUri = Uri.parse(location);
+                        /* To maintain the same security setting in the default HttpURLConnection
+                         * the scheme must match in order to follow the redirect. Alternatively
+                         * the request is for our trusted capacitor server and must match the url */
+                        if (locationUri.getScheme().equals(request.getUrl().getScheme()) || isServerUrl(locationUri)) {
+                            Logger.debug("302 Security PASSED");
+                            /* Force the webpage to reload through javascript. If left to default
+                             * behavior, the webview would not call `shouldInterceptRequest` for
+                             * subsequent redirect URLs preventing Capacitor from injecting js in
+                             * the final redirection.
+                             * see https://developer.android.com/reference/android/webkit/WebViewClient#shouldInterceptRequest(android.webkit.WebView,%20android.webkit.WebResourceRequest) */
+                            String html = "<script>location.replace(\"" + location + "\")</script>";
+                            return new WebResourceResponse(
+                                    "text/html",
+                                    handler.getEncoding(),
+                                    handler.getStatusCode(),
+                                    handler.getReasonPhrase(),
+                                    handler.getResponseHeaders(),
+                                    new ByteArrayInputStream(html.getBytes(StandardCharsets.UTF_8))
+                            );
+                        }
+                    }
+                    
                     responseStream = jsInjector.getInjectedStream(responseStream);
                     return new WebResourceResponse(
                         "text/html",